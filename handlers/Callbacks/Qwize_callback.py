from aiogram import Router,F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from handlers.Keyboards.inline_keyboards import topic_keyboard
from handlers.Qwize.Qwize_games import get_quiz_question, get_score
from handlers.States.Qwize_States import QuizStates


router = Router()


@router.callback_query(F.data=="Quiz_game")
async def qwize_handler( call:CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞', reply_markup=topic_keyboard())
    await call.answer()


@router.callback_query(F.data.startswith('topic:'))
async def close_mode_handler(call: CallbackQuery, state: FSMContext):
    await call.answer('–°–µ–π—á–∞—Å –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å', show_alert=True)
    topic = call.data.split(':')[-1]
    question = await get_quiz_question(topic)
    await state.update_data(question=question)
    await state.update_data(topic=topic)
    await state.set_state(QuizStates.waiting_answer)
    await call.message.answer(f'–¢–µ–º–∞: {topic}\n\n{question}\n –ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.')


@router.callback_query(F.data == 'next_question')
async def next_quiz_qestion_handler(call: CallbackQuery, state: FSMContext):
    await call.answer('–°–µ–π—á–∞—Å –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å', show_alert=True)
    data = await state.get_data()
    topic = data.get('topic')
    question = await get_quiz_question(topic)
    await call.message.answer(f'–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ —Ç–µ–º–µ: {topic}\n\n{question}')
    await state.set_state(QuizStates.waiting_answer)


@router.callback_query(F.data == 'change_topic')
async def next_quiz_question_handler(call: CallbackQuery):
    await call.message.answer('–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ç–µ–º—É', reply_markup=topic_keyboard())


@router.callback_query(F.data == 'end_quiz')
async def next_quiz_qestion_handler(call: CallbackQuery, state: FSMContext):
    score = await get_score(state)
    await state.clear()
    await call.message.answer(f'üé¨ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–≤–π–æ –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {score}')
